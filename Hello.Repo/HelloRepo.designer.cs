#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hello.Repo
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="helloapp")]
	public partial class HelloRepoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCampaign(Campaign instance);
    partial void UpdateCampaign(Campaign instance);
    partial void DeleteCampaign(Campaign instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertFriendship(Friendship instance);
    partial void UpdateFriendship(Friendship instance);
    partial void DeleteFriendship(Friendship instance);
    partial void InsertPoint(Point instance);
    partial void UpdatePoint(Point instance);
    partial void DeletePoint(Point instance);
    partial void InsertRedemption(Redemption instance);
    partial void UpdateRedemption(Redemption instance);
    partial void DeleteRedemption(Redemption instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertTideMark(TideMark instance);
    partial void UpdateTideMark(TideMark instance);
    partial void DeleteTideMark(TideMark instance);
    partial void InsertSat(Sat instance);
    partial void UpdateSat(Sat instance);
    partial void DeleteSat(Sat instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertHiFive(HiFive instance);
    partial void UpdateHiFive(HiFive instance);
    partial void DeleteHiFive(HiFive instance);
    partial void InsertToken(Token instance);
    partial void UpdateToken(Token instance);
    partial void DeleteToken(Token instance);
    partial void InsertSeat(Seat instance);
    partial void UpdateSeat(Seat instance);
    partial void DeleteSeat(Seat instance);
    partial void InsertUserType(UserType instance);
    partial void UpdateUserType(UserType instance);
    partial void DeleteUserType(UserType instance);
    partial void InsertQueuedTweet(QueuedTweet instance);
    partial void UpdateQueuedTweet(QueuedTweet instance);
    partial void DeleteQueuedTweet(QueuedTweet instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public HelloRepoDataContext() : 
				base(global::Hello.Repo.Properties.Settings.Default.helloappConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public HelloRepoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HelloRepoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HelloRepoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HelloRepoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Campaign> Campaigns
		{
			get
			{
				return this.GetTable<Campaign>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Friendship> Friendships
		{
			get
			{
				return this.GetTable<Friendship>();
			}
		}
		
		public System.Data.Linq.Table<Point> Points
		{
			get
			{
				return this.GetTable<Point>();
			}
		}
		
		public System.Data.Linq.Table<Redemption> Redemptions
		{
			get
			{
				return this.GetTable<Redemption>();
			}
		}
		
		public System.Data.Linq.Table<TagAggregate> TagAggregates
		{
			get
			{
				return this.GetTable<TagAggregate>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<TideMark> TideMarks
		{
			get
			{
				return this.GetTable<TideMark>();
			}
		}
		
		public System.Data.Linq.Table<Sat> Sats
		{
			get
			{
				return this.GetTable<Sat>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<HiFive> HiFives
		{
			get
			{
				return this.GetTable<HiFive>();
			}
		}
		
		public System.Data.Linq.Table<Token> Tokens
		{
			get
			{
				return this.GetTable<Token>();
			}
		}
		
		public System.Data.Linq.Table<Seat> Seats
		{
			get
			{
				return this.GetTable<Seat>();
			}
		}
		
		public System.Data.Linq.Table<UserType> UserTypes
		{
			get
			{
				return this.GetTable<UserType>();
			}
		}
		
		public System.Data.Linq.Table<QueuedTweet> QueuedTweets
		{
			get
			{
				return this.GetTable<QueuedTweet>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		[Function(Name="dbo.SearchUsers")]
		public ISingleResult<User> SearchUsers([Parameter(Name="SearchString", DbType="VarChar(MAX)")] string searchString, [Parameter(Name="MaxResults", DbType="Int")] System.Nullable<int> maxResults)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), searchString, maxResults);
            return ((ISingleResult<User>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Campaigns")]
	public partial class Campaign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CampaignID;
		
		private string _Name;
		
		private int _Value;
		
		private EntitySet<Token> _Tokens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCampaignIDChanging(int value);
    partial void OnCampaignIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    #endregion
		
		public Campaign()
		{
			this._Tokens = new EntitySet<Token>(new Action<Token>(this.attach_Tokens), new Action<Token>(this.detach_Tokens));
			OnCreated();
		}
		
		[Column(Storage="_CampaignID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CampaignID
		{
			get
			{
				return this._CampaignID;
			}
			set
			{
				if ((this._CampaignID != value))
				{
					this.OnCampaignIDChanging(value);
					this.SendPropertyChanging();
					this._CampaignID = value;
					this.SendPropertyChanged("CampaignID");
					this.OnCampaignIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Association(Name="Campaign_Token", Storage="_Tokens", ThisKey="CampaignID", OtherKey="CampaignID")]
		public EntitySet<Token> Tokens
		{
			get
			{
				return this._Tokens;
			}
			set
			{
				this._Tokens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tokens(Token entity)
		{
			this.SendPropertyChanging();
			entity.Campaign = this;
		}
		
		private void detach_Tokens(Token entity)
		{
			this.SendPropertyChanging();
			entity.Campaign = null;
		}
	}
	
	[Table(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private string _Name;
		
		private string _Slug;
		
		private System.DateTime _Start;
		
		private System.DateTime _End;
		
		private int _HiFiveLimit;
		
		private EntitySet<Session> _Sessions;
		
		private EntitySet<HiFive> _HiFives;
		
		private EntitySet<Seat> _Seats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSlugChanging(string value);
    partial void OnSlugChanged();
    partial void OnStartChanging(System.DateTime value);
    partial void OnStartChanged();
    partial void OnEndChanging(System.DateTime value);
    partial void OnEndChanged();
    partial void OnHiFiveLimitChanging(int value);
    partial void OnHiFiveLimitChanged();
    #endregion
		
		public Event()
		{
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			this._HiFives = new EntitySet<HiFive>(new Action<HiFive>(this.attach_HiFives), new Action<HiFive>(this.detach_HiFives));
			this._Seats = new EntitySet<Seat>(new Action<Seat>(this.attach_Seats), new Action<Seat>(this.detach_Seats));
			OnCreated();
		}
		
		[Column(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Slug", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Slug
		{
			get
			{
				return this._Slug;
			}
			set
			{
				if ((this._Slug != value))
				{
					this.OnSlugChanging(value);
					this.SendPropertyChanging();
					this._Slug = value;
					this.SendPropertyChanged("Slug");
					this.OnSlugChanged();
				}
			}
		}
		
		[Column(Storage="_Start", DbType="DATETIME NOT NULL")]
		public System.DateTime Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[Column(Storage="_End", DbType="DATETIME NOT NULL")]
		public System.DateTime End
		{
			get
			{
				return this._End;
			}
			set
			{
				if ((this._End != value))
				{
					this.OnEndChanging(value);
					this.SendPropertyChanging();
					this._End = value;
					this.SendPropertyChanged("End");
					this.OnEndChanged();
				}
			}
		}
		
		[Column(Storage="_HiFiveLimit", DbType="INT NOT NULL")]
		public int HiFiveLimit
		{
			get
			{
				return this._HiFiveLimit;
			}
			set
			{
				if ((this._HiFiveLimit != value))
				{
					this.OnHiFiveLimitChanging(value);
					this.SendPropertyChanging();
					this._HiFiveLimit = value;
					this.SendPropertyChanged("HiFiveLimit");
					this.OnHiFiveLimitChanged();
				}
			}
		}
		
		[Association(Name="Event_Session", Storage="_Sessions", ThisKey="EventID", OtherKey="EventID")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[Association(Name="Event_HiFive", Storage="_HiFives", ThisKey="EventID", OtherKey="EventID")]
		public EntitySet<HiFive> HiFives
		{
			get
			{
				return this._HiFives;
			}
			set
			{
				this._HiFives.Assign(value);
			}
		}
		
		[Association(Name="Event_Seat", Storage="_Seats", ThisKey="EventID", OtherKey="EventID")]
		public EntitySet<Seat> Seats
		{
			get
			{
				return this._Seats;
			}
			set
			{
				this._Seats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_HiFives(HiFive entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_HiFives(HiFive entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[Table(Name="dbo.Friendships")]
	public partial class Friendship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Befriender;
		
		private string _Befriendee;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBefrienderChanging(string value);
    partial void OnBefrienderChanged();
    partial void OnBefriendeeChanging(string value);
    partial void OnBefriendeeChanged();
    #endregion
		
		public Friendship()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_Befriender", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Befriender
		{
			get
			{
				return this._Befriender;
			}
			set
			{
				if ((this._Befriender != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBefrienderChanging(value);
					this.SendPropertyChanging();
					this._Befriender = value;
					this.SendPropertyChanged("Befriender");
					this.OnBefrienderChanged();
				}
			}
		}
		
		[Column(Storage="_Befriendee", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Befriendee
		{
			get
			{
				return this._Befriendee;
			}
			set
			{
				if ((this._Befriendee != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBefriendeeChanging(value);
					this.SendPropertyChanging();
					this._Befriendee = value;
					this.SendPropertyChanged("Befriendee");
					this.OnBefriendeeChanged();
				}
			}
		}
		
		[Association(Name="User_Friendship", Storage="_User", ThisKey="Befriendee", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Befriendees.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Befriendees.Add(this);
						this._Befriendee = value.Username;
					}
					else
					{
						this._Befriendee = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="User_Friendship1", Storage="_User1", ThisKey="Befriender", OtherKey="Username", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Befrienders.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Befrienders.Add(this);
						this._Befriender = value.Username;
					}
					else
					{
						this._Befriender = default(string);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Points")]
	public partial class Point : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PointID;
		
		private string _Username;
		
		private System.DateTime _Issued;
		
		private int _Amount;
		
		private string _Details;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPointIDChanging(int value);
    partial void OnPointIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnIssuedChanging(System.DateTime value);
    partial void OnIssuedChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    #endregion
		
		public Point()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_PointID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PointID
		{
			get
			{
				return this._PointID;
			}
			set
			{
				if ((this._PointID != value))
				{
					this.OnPointIDChanging(value);
					this.SendPropertyChanging();
					this._PointID = value;
					this.SendPropertyChanged("PointID");
					this.OnPointIDChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Issued", DbType="DateTime NOT NULL")]
		public System.DateTime Issued
		{
			get
			{
				return this._Issued;
			}
			set
			{
				if ((this._Issued != value))
				{
					this.OnIssuedChanging(value);
					this.SendPropertyChanging();
					this._Issued = value;
					this.SendPropertyChanged("Issued");
					this.OnIssuedChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Details", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[Association(Name="User_Point", Storage="_User", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Points.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Points.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Redemptions")]
	public partial class Redemption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RedemptionID;
		
		private string _Username;
		
		private int _TokenID;
		
		private System.DateTime _Created;
		
		private EntityRef<Token> _Token;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRedemptionIDChanging(int value);
    partial void OnRedemptionIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnTokenIDChanging(int value);
    partial void OnTokenIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
		
		public Redemption()
		{
			this._Token = default(EntityRef<Token>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_RedemptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RedemptionID
		{
			get
			{
				return this._RedemptionID;
			}
			set
			{
				if ((this._RedemptionID != value))
				{
					this.OnRedemptionIDChanging(value);
					this.SendPropertyChanging();
					this._RedemptionID = value;
					this.SendPropertyChanged("RedemptionID");
					this.OnRedemptionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_TokenID", DbType="Int NOT NULL")]
		public int TokenID
		{
			get
			{
				return this._TokenID;
			}
			set
			{
				if ((this._TokenID != value))
				{
					if (this._Token.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTokenIDChanging(value);
					this.SendPropertyChanging();
					this._TokenID = value;
					this.SendPropertyChanged("TokenID");
					this.OnTokenIDChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Association(Name="Token_Redemption", Storage="_Token", ThisKey="TokenID", OtherKey="TokenID", IsForeignKey=true)]
		public Token Token
		{
			get
			{
				return this._Token.Entity;
			}
			set
			{
				Token previousValue = this._Token.Entity;
				if (((previousValue != value) 
							|| (this._Token.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Token.Entity = null;
						previousValue.Redemptions.Remove(this);
					}
					this._Token.Entity = value;
					if ((value != null))
					{
						value.Redemptions.Add(this);
						this._TokenID = value.TokenID;
					}
					else
					{
						this._TokenID = default(int);
					}
					this.SendPropertyChanged("Token");
				}
			}
		}
		
		[Association(Name="User_Redemption", Storage="_User", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Redemptions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Redemptions.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TagAggregates")]
	public partial class TagAggregate
	{
		
		private int _TagAggregateID;
		
		private string _Tag;
		
		private string _UserTypeID;
		
		private int _Count;
		
		public TagAggregate()
		{
		}
		
		[Column(Storage="_TagAggregateID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int TagAggregateID
		{
			get
			{
				return this._TagAggregateID;
			}
			set
			{
				if ((this._TagAggregateID != value))
				{
					this._TagAggregateID = value;
				}
			}
		}
		
		[Column(Storage="_Tag", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this._Tag = value;
				}
			}
		}
		
		[Column(Storage="_UserTypeID", DbType="Char(3)")]
		public string UserTypeID
		{
			get
			{
				return this._UserTypeID;
			}
			set
			{
				if ((this._UserTypeID != value))
				{
					this._UserTypeID = value;
				}
			}
		}
		
		[Column(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this._Count = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Messages")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Text;
		
		private bool _Offensive;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnOffensiveChanging(bool value);
    partial void OnOffensiveChanged();
    #endregion
		
		public Message()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(140) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_Offensive", DbType="Bit NOT NULL")]
		public bool Offensive
		{
			get
			{
				return this._Offensive;
			}
			set
			{
				if ((this._Offensive != value))
				{
					this.OnOffensiveChanging(value);
					this.SendPropertyChanging();
					this._Offensive = value;
					this.SendPropertyChanged("Offensive");
					this.OnOffensiveChanged();
				}
			}
		}
		
		[Association(Name="User_Message", Storage="_User", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Message = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Message = this;
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Username;
		
		private System.DateTime _Created;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
		
		public Tag()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Association(Name="User_Tag", Storage="_User", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tags.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tags.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TideMarks")]
	public partial class TideMark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TideMarkID;
		
		private string _Name;
		
		private long _LastID;
		
		private System.DateTime _TimeStamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTideMarkIDChanging(int value);
    partial void OnTideMarkIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLastIDChanging(long value);
    partial void OnLastIDChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    #endregion
		
		public TideMark()
		{
			OnCreated();
		}
		
		[Column(Storage="_TideMarkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TideMarkID
		{
			get
			{
				return this._TideMarkID;
			}
			set
			{
				if ((this._TideMarkID != value))
				{
					this.OnTideMarkIDChanging(value);
					this.SendPropertyChanging();
					this._TideMarkID = value;
					this.SendPropertyChanged("TideMarkID");
					this.OnTideMarkIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastID", DbType="BigInt NOT NULL")]
		public long LastID
		{
			get
			{
				return this._LastID;
			}
			set
			{
				if ((this._LastID != value))
				{
					this.OnLastIDChanging(value);
					this.SendPropertyChanging();
					this._LastID = value;
					this.SendPropertyChanged("LastID");
					this.OnLastIDChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Sats")]
	public partial class Sat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private int _SessionID;
		
		private int _SeatID;
		
		private EntityRef<Session> _Session;
		
		private EntityRef<Seat> _Seat;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnSessionIDChanging(int value);
    partial void OnSessionIDChanged();
    partial void OnSeatIDChanging(int value);
    partial void OnSeatIDChanged();
    #endregion
		
		public Sat()
		{
			this._Session = default(EntityRef<Session>);
			this._Seat = default(EntityRef<Seat>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_SessionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeatID", DbType="Int NOT NULL")]
		public int SeatID
		{
			get
			{
				return this._SeatID;
			}
			set
			{
				if ((this._SeatID != value))
				{
					if (this._Seat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeatIDChanging(value);
					this.SendPropertyChanging();
					this._SeatID = value;
					this.SendPropertyChanged("SeatID");
					this.OnSeatIDChanged();
				}
			}
		}
		
		[Association(Name="Session_Sat", Storage="_Session", ThisKey="SessionID", OtherKey="SessionID", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Sats.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Sats.Add(this);
						this._SessionID = value.SessionID;
					}
					else
					{
						this._SessionID = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		[Association(Name="Seat_Sat", Storage="_Seat", ThisKey="SeatID", OtherKey="SeatID", IsForeignKey=true)]
		public Seat Seat
		{
			get
			{
				return this._Seat.Entity;
			}
			set
			{
				Seat previousValue = this._Seat.Entity;
				if (((previousValue != value) 
							|| (this._Seat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seat.Entity = null;
						previousValue.Sats.Remove(this);
					}
					this._Seat.Entity = value;
					if ((value != null))
					{
						value.Sats.Add(this);
						this._SeatID = value.SeatID;
					}
					else
					{
						this._SeatID = default(int);
					}
					this.SendPropertyChanged("Seat");
				}
			}
		}
		
		[Association(Name="User_Sat", Storage="_User", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Sats.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Sats.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Sessions")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SessionID;
		
		private int _EventID;
		
		private string _Name;
		
		private System.DateTime _Start;
		
		private System.DateTime _Finish;
		
		private EntitySet<Sat> _Sats;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionIDChanging(int value);
    partial void OnSessionIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartChanging(System.DateTime value);
    partial void OnStartChanged();
    partial void OnFinishChanging(System.DateTime value);
    partial void OnFinishChanged();
    #endregion
		
		public Session()
		{
			this._Sats = new EntitySet<Sat>(new Action<Sat>(this.attach_Sats), new Action<Sat>(this.detach_Sats));
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[Column(Storage="_SessionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[Column(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Start", DbType="DateTime NOT NULL")]
		public System.DateTime Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[Column(Storage="_Finish", DbType="DateTime NOT NULL")]
		public System.DateTime Finish
		{
			get
			{
				return this._Finish;
			}
			set
			{
				if ((this._Finish != value))
				{
					this.OnFinishChanging(value);
					this.SendPropertyChanging();
					this._Finish = value;
					this.SendPropertyChanged("Finish");
					this.OnFinishChanged();
				}
			}
		}
		
		[Association(Name="Session_Sat", Storage="_Sats", ThisKey="SessionID", OtherKey="SessionID")]
		public EntitySet<Sat> Sats
		{
			get
			{
				return this._Sats;
			}
			set
			{
				this._Sats.Assign(value);
			}
		}
		
		[Association(Name="Event_Session", Storage="_Event", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sats(Sat entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Sats(Sat entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
	}
	
	[Table(Name="dbo.HiFives")]
	public partial class HiFive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HiFiveID;
		
		private string _HiFiver;
		
		private string _HiFivee;
		
		private int _EventID;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHiFiveIDChanging(int value);
    partial void OnHiFiveIDChanged();
    partial void OnHiFiverChanging(string value);
    partial void OnHiFiverChanged();
    partial void OnHiFiveeChanging(string value);
    partial void OnHiFiveeChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    #endregion
		
		public HiFive()
		{
			this._Event = default(EntityRef<Event>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_HiFiveID", AutoSync=AutoSync.OnInsert, DbType="INT NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HiFiveID
		{
			get
			{
				return this._HiFiveID;
			}
			set
			{
				if ((this._HiFiveID != value))
				{
					this.OnHiFiveIDChanging(value);
					this.SendPropertyChanging();
					this._HiFiveID = value;
					this.SendPropertyChanged("HiFiveID");
					this.OnHiFiveIDChanged();
				}
			}
		}
		
		[Column(Storage="_HiFiver", DbType="VARCHAR(50) NOT NULL", CanBeNull=false)]
		public string HiFiver
		{
			get
			{
				return this._HiFiver;
			}
			set
			{
				if ((this._HiFiver != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHiFiverChanging(value);
					this.SendPropertyChanging();
					this._HiFiver = value;
					this.SendPropertyChanged("HiFiver");
					this.OnHiFiverChanged();
				}
			}
		}
		
		[Column(Storage="_HiFivee", DbType="VARCHAR(50) NOT NULL", CanBeNull=false)]
		public string HiFivee
		{
			get
			{
				return this._HiFivee;
			}
			set
			{
				if ((this._HiFivee != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHiFiveeChanging(value);
					this.SendPropertyChanging();
					this._HiFivee = value;
					this.SendPropertyChanged("HiFivee");
					this.OnHiFiveeChanged();
				}
			}
		}
		
		[Column(Storage="_EventID", DbType="INT NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Association(Name="Event_HiFive", Storage="_Event", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.HiFives.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.HiFives.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[Association(Name="User_HiFive", Storage="_User", ThisKey="HiFivee", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.HiFivees.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.HiFivees.Add(this);
						this._HiFivee = value.Username;
					}
					else
					{
						this._HiFivee = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="User_HiFive1", Storage="_User1", ThisKey="HiFiver", OtherKey="Username", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.HiFivers.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.HiFivers.Add(this);
						this._HiFiver = value.Username;
					}
					else
					{
						this._HiFiver = default(string);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tokens")]
	public partial class Token : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TokenID;
		
		private int _CampaignID;
		
		private string _Code;
		
		private int _AllowedRedemptions;

        private string _FileName;

        private string _Text;

		private EntitySet<Redemption> _Redemptions;
		
		private EntityRef<Campaign> _Campaign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTokenIDChanging(int value);
    partial void OnTokenIDChanged();
    partial void OnCampaignIDChanging(int value);
    partial void OnCampaignIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnAllowedRedemptionsChanging(int value);
    partial void OnAllowedRedemptionsChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Token()
		{
			this._Redemptions = new EntitySet<Redemption>(new Action<Redemption>(this.attach_Redemptions), new Action<Redemption>(this.detach_Redemptions));
			this._Campaign = default(EntityRef<Campaign>);
			OnCreated();
		}
		
		[Column(Storage="_TokenID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TokenID
		{
			get
			{
				return this._TokenID;
			}
			set
			{
				if ((this._TokenID != value))
				{
					this.OnTokenIDChanging(value);
					this.SendPropertyChanging();
					this._TokenID = value;
					this.SendPropertyChanged("TokenID");
					this.OnTokenIDChanged();
				}
			}
		}
		
		[Column(Storage="_CampaignID", DbType="Int NOT NULL")]
		public int CampaignID
		{
			get
			{
				return this._CampaignID;
			}
			set
			{
				if ((this._CampaignID != value))
				{
					if (this._Campaign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCampaignIDChanging(value);
					this.SendPropertyChanging();
					this._CampaignID = value;
					this.SendPropertyChanged("CampaignID");
					this.OnCampaignIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AllowedRedemptions", DbType="Int NOT NULL")]
		public int AllowedRedemptions
		{
			get
			{
				return this._AllowedRedemptions;
			}
			set
			{
				if ((this._AllowedRedemptions != value))
				{
					this.OnAllowedRedemptionsChanging(value);
					this.SendPropertyChanging();
					this._AllowedRedemptions = value;
					this.SendPropertyChanged("AllowedRedemptions");
					this.OnAllowedRedemptionsChanged();
				}
			}
		}

        [Column(Storage = "_FileName", DbType = "VarChar(100) NOT NULL", CanBeNull = false)]
        public string FileName
        {
            get
            {
                return this._FileName;
            }
            set
            {
                if ((this._FileName != value))
                {
                    this.OnFileNameChanging(value);
                    this.SendPropertyChanging();
                    this._FileName = value;
                    this.SendPropertyChanged("FileName");
                    this.OnFileNameChanged();
                }
            }
        }

        [Column(Storage = "_Text", DbType = "VarChar(100) NOT NULL", CanBeNull = false)]
        public string Text
        {
            get
            {
                return this._Text;
            }
            set
            {
                if ((this._Text != value))
                {
                    this.OnTextChanging(value);
                    this.SendPropertyChanging();
                    this._Text = value;
                    this.SendPropertyChanged("Text");
                    this.OnTextChanged();
                }
            }
        }
		
		[Association(Name="Token_Redemption", Storage="_Redemptions", ThisKey="TokenID", OtherKey="TokenID")]
		public EntitySet<Redemption> Redemptions
		{
			get
			{
				return this._Redemptions;
			}
			set
			{
				this._Redemptions.Assign(value);
			}
		}
		
		[Association(Name="Campaign_Token", Storage="_Campaign", ThisKey="CampaignID", OtherKey="CampaignID", IsForeignKey=true)]
		public Campaign Campaign
		{
			get
			{
				return this._Campaign.Entity;
			}
			set
			{
				Campaign previousValue = this._Campaign.Entity;
				if (((previousValue != value) 
							|| (this._Campaign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Campaign.Entity = null;
						previousValue.Tokens.Remove(this);
					}
					this._Campaign.Entity = value;
					if ((value != null))
					{
						value.Tokens.Add(this);
						this._CampaignID = value.CampaignID;
					}
					else
					{
						this._CampaignID = default(int);
					}
					this.SendPropertyChanged("Campaign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Redemptions(Redemption entity)
		{
			this.SendPropertyChanging();
			entity.Token = this;
		}
		
		private void detach_Redemptions(Redemption entity)
		{
			this.SendPropertyChanging();
			entity.Token = null;
		}
	}
	
	[Table(Name="dbo.Seats")]
	public partial class Seat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeatID;
		
		private int _Row;
		
		private int _Column;
		
		private int _EventID;
		
		private string _Code;
		
		private EntitySet<Sat> _Sats;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeatIDChanging(int value);
    partial void OnSeatIDChanged();
    partial void OnRowChanging(int value);
    partial void OnRowChanged();
    partial void OnColumnChanging(int value);
    partial void OnColumnChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public Seat()
		{
			this._Sats = new EntitySet<Sat>(new Action<Sat>(this.attach_Sats), new Action<Sat>(this.detach_Sats));
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[Column(Storage="_SeatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SeatID
		{
			get
			{
				return this._SeatID;
			}
			set
			{
				if ((this._SeatID != value))
				{
					this.OnSeatIDChanging(value);
					this.SendPropertyChanging();
					this._SeatID = value;
					this.SendPropertyChanged("SeatID");
					this.OnSeatIDChanged();
				}
			}
		}
		
		[Column(Storage="_Row", DbType="Int NOT NULL")]
		public int Row
		{
			get
			{
				return this._Row;
			}
			set
			{
				if ((this._Row != value))
				{
					this.OnRowChanging(value);
					this.SendPropertyChanging();
					this._Row = value;
					this.SendPropertyChanged("Row");
					this.OnRowChanged();
				}
			}
		}
		
		[Column(Name="[Column]", Storage="_Column", DbType="Int NOT NULL")]
		public int Column
		{
			get
			{
				return this._Column;
			}
			set
			{
				if ((this._Column != value))
				{
					this.OnColumnChanging(value);
					this.SendPropertyChanging();
					this._Column = value;
					this.SendPropertyChanged("Column");
					this.OnColumnChanged();
				}
			}
		}
		
		[Column(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="Char(5)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Association(Name="Seat_Sat", Storage="_Sats", ThisKey="SeatID", OtherKey="SeatID")]
		public EntitySet<Sat> Sats
		{
			get
			{
				return this._Sats;
			}
			set
			{
				this._Sats.Assign(value);
			}
		}
		
		[Association(Name="Event_Seat", Storage="_Event", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Seats.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Seats.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sats(Sat entity)
		{
			this.SendPropertyChanging();
			entity.Seat = this;
		}
		
		private void detach_Sats(Sat entity)
		{
			this.SendPropertyChanging();
			entity.Seat = null;
		}
	}
	
	[Table(Name="dbo.UserTypes")]
	public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserTypeID;
		
		private string _Name;
		
		private int _Ordering;
		
		private string _DefaultColour;
		
		private string _BurningColour;
		
		private string _HotColour;
		
		private string _WarmColour;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserTypeIDChanging(string value);
    partial void OnUserTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderingChanging(int value);
    partial void OnOrderingChanged();
    partial void OnDefaultColourChanging(string value);
    partial void OnDefaultColourChanged();
    partial void OnBurningColourChanging(string value);
    partial void OnBurningColourChanged();
    partial void OnHotColourChanging(string value);
    partial void OnHotColourChanged();
    partial void OnWarmColourChanging(string value);
    partial void OnWarmColourChanged();
    #endregion
		
		public UserType()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[Column(Storage="_UserTypeID", DbType="Char(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserTypeID
		{
			get
			{
				return this._UserTypeID;
			}
			set
			{
				if ((this._UserTypeID != value))
				{
					this.OnUserTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UserTypeID = value;
					this.SendPropertyChanged("UserTypeID");
					this.OnUserTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Ordering", DbType="Int NOT NULL")]
		public int Ordering
		{
			get
			{
				return this._Ordering;
			}
			set
			{
				if ((this._Ordering != value))
				{
					this.OnOrderingChanging(value);
					this.SendPropertyChanging();
					this._Ordering = value;
					this.SendPropertyChanged("Ordering");
					this.OnOrderingChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultColour", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string DefaultColour
		{
			get
			{
				return this._DefaultColour;
			}
			set
			{
				if ((this._DefaultColour != value))
				{
					this.OnDefaultColourChanging(value);
					this.SendPropertyChanging();
					this._DefaultColour = value;
					this.SendPropertyChanged("DefaultColour");
					this.OnDefaultColourChanged();
				}
			}
		}
		
		[Column(Storage="_BurningColour", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string BurningColour
		{
			get
			{
				return this._BurningColour;
			}
			set
			{
				if ((this._BurningColour != value))
				{
					this.OnBurningColourChanging(value);
					this.SendPropertyChanging();
					this._BurningColour = value;
					this.SendPropertyChanged("BurningColour");
					this.OnBurningColourChanged();
				}
			}
		}
		
		[Column(Storage="_HotColour", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string HotColour
		{
			get
			{
				return this._HotColour;
			}
			set
			{
				if ((this._HotColour != value))
				{
					this.OnHotColourChanging(value);
					this.SendPropertyChanging();
					this._HotColour = value;
					this.SendPropertyChanged("HotColour");
					this.OnHotColourChanged();
				}
			}
		}
		
		[Column(Storage="_WarmColour", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string WarmColour
		{
			get
			{
				return this._WarmColour;
			}
			set
			{
				if ((this._WarmColour != value))
				{
					this.OnWarmColourChanging(value);
					this.SendPropertyChanging();
					this._WarmColour = value;
					this.SendPropertyChanged("WarmColour");
					this.OnWarmColourChanged();
				}
			}
		}
		
		[Association(Name="UserType_User", Storage="_Users", ThisKey="UserTypeID", OtherKey="UserTypeID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
	}
	
	[Table(Name="dbo.QueuedTweets")]
	public partial class QueuedTweet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QueuedTweetID;
		
		private string _Username;
		
		private string _Message;
		
		private System.DateTime _Created;
		
		private bool _Processed;
		
		private string _ImageURL;
		
		private int _Followers;

        private string _FullName;

    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQueuedTweetIDChanging(int value);
    partial void OnQueuedTweetIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnProcessedChanging(bool value);
    partial void OnProcessedChanged();
    partial void OnImageURLChanging(string value);
    partial void OnImageURLChanged();
    partial void OnFollowersChanging(int value);
    partial void OnFollowersChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    #endregion
		
		public QueuedTweet()
		{
			OnCreated();
		}
		
		[Column(Storage="_QueuedTweetID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QueuedTweetID
		{
			get
			{
				return this._QueuedTweetID;
			}
			set
			{
				if ((this._QueuedTweetID != value))
				{
					this.OnQueuedTweetIDChanging(value);
					this.SendPropertyChanging();
					this._QueuedTweetID = value;
					this.SendPropertyChanged("QueuedTweetID");
					this.OnQueuedTweetIDChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Processed", DbType="Bit NOT NULL")]
		public bool Processed
		{
			get
			{
				return this._Processed;
			}
			set
			{
				if ((this._Processed != value))
				{
					this.OnProcessedChanging(value);
					this.SendPropertyChanging();
					this._Processed = value;
					this.SendPropertyChanged("Processed");
					this.OnProcessedChanged();
				}
			}
		}
		
		[Column(Storage="_ImageURL", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ImageURL
		{
			get
			{
				return this._ImageURL;
			}
			set
			{
				if ((this._ImageURL != value))
				{
					this.OnImageURLChanging(value);
					this.SendPropertyChanging();
					this._ImageURL = value;
					this.SendPropertyChanged("ImageURL");
					this.OnImageURLChanged();
				}
			}
		}
		
		[Column(Storage="_Followers", DbType="Int NOT NULL")]
		public int Followers
		{
			get
			{
				return this._Followers;
			}
			set
			{
				if ((this._Followers != value))
				{
					this.OnFollowersChanging(value);
					this.SendPropertyChanging();
					this._Followers = value;
					this.SendPropertyChanged("Followers");
					this.OnFollowersChanged();
				}
			}
		}

        [Column(Storage = "_FullName", DbType = "VarChar(100) NOT NULL", CanBeNull = false)]
        public string FullName
        {
            get
            {
                return this._FullName;
            }
            set
            {
                if ((this._FullName != value))
                {
                    this.OnFullNameChanging(value);
                    this.SendPropertyChanging();
                    this._FullName = value;
                    this.SendPropertyChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _ImageURL;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private string _UserTypeID;
		
		private bool _ShadowAccount;
		
		private int _Followers;

        private string _FullName;

		private EntitySet<Friendship> _Befriendees;
		
		private EntitySet<Friendship> _Befrienders;
		
		private EntitySet<Point> _Points;
		
		private EntitySet<Redemption> _Redemptions;
		
		private EntityRef<Message> _Message;
		
		private EntitySet<Tag> _Tags;
		
		private EntitySet<Sat> _Sats;
		
		private EntitySet<HiFive> _HiFives;
		
		private EntitySet<HiFive> _HiFives1;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnImageURLChanging(string value);
    partial void OnImageURLChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnUserTypeIDChanging(string value);
    partial void OnUserTypeIDChanged();
    partial void OnShadowAccountChanging(bool value);
    partial void OnShadowAccountChanged();
    partial void OnFollowersChanging(int value);
    partial void OnFollowersChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    #endregion
		
		public User()
		{
			this._Befriendees = new EntitySet<Friendship>(new Action<Friendship>(this.attach_Befriendees), new Action<Friendship>(this.detach_Befriendees));
			this._Befrienders = new EntitySet<Friendship>(new Action<Friendship>(this.attach_Befrienders), new Action<Friendship>(this.detach_Befrienders));
			this._Points = new EntitySet<Point>(new Action<Point>(this.attach_Points), new Action<Point>(this.detach_Points));
			this._Redemptions = new EntitySet<Redemption>(new Action<Redemption>(this.attach_Redemptions), new Action<Redemption>(this.detach_Redemptions));
			this._Message = default(EntityRef<Message>);
			this._Tags = new EntitySet<Tag>(new Action<Tag>(this.attach_Tags), new Action<Tag>(this.detach_Tags));
			this._Sats = new EntitySet<Sat>(new Action<Sat>(this.attach_Sats), new Action<Sat>(this.detach_Sats));
			this._HiFives = new EntitySet<HiFive>(new Action<HiFive>(this.attach_HiFives), new Action<HiFive>(this.detach_HiFives));
			this._HiFives1 = new EntitySet<HiFive>(new Action<HiFive>(this.attach_HiFives1), new Action<HiFive>(this.detach_HiFives1));
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[Column(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_ImageURL", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string ImageURL
		{
			get
			{
				return this._ImageURL;
			}
			set
			{
				if ((this._ImageURL != value))
				{
					this.OnImageURLChanging(value);
					this.SendPropertyChanging();
					this._ImageURL = value;
					this.SendPropertyChanged("ImageURL");
					this.OnImageURLChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[Column(Storage="_UserTypeID", DbType="Char(3)")]
		public string UserTypeID
		{
			get
			{
				return this._UserTypeID;
			}
			set
			{
				if ((this._UserTypeID != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UserTypeID = value;
					this.SendPropertyChanged("UserTypeID");
					this.OnUserTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShadowAccount", DbType="Bit NOT NULL")]
		public bool ShadowAccount
		{
			get
			{
				return this._ShadowAccount;
			}
			set
			{
				if ((this._ShadowAccount != value))
				{
					this.OnShadowAccountChanging(value);
					this.SendPropertyChanging();
					this._ShadowAccount = value;
					this.SendPropertyChanged("ShadowAccount");
					this.OnShadowAccountChanged();
				}
			}
		}
		
		[Column(Storage="_Followers", DbType="Int NOT NULL")]
		public int Followers
		{
			get
			{
				return this._Followers;
			}
			set
			{
				if ((this._Followers != value))
				{
					this.OnFollowersChanging(value);
					this.SendPropertyChanging();
					this._Followers = value;
					this.SendPropertyChanged("Followers");
					this.OnFollowersChanged();
				}
			}
		}

        [Column(Storage = "_FullName", DbType = "VarChar(100) NOT NULL", CanBeNull = false)]
        public string FullName
        {
            get
            {
                return this._FullName;
            }
            set
            {
                if ((this._FullName != value))
                {
                    this.OnFullNameChanging(value);
                    this.SendPropertyChanging();
                    this._FullName = value;
                    this.SendPropertyChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }
		
		[Association(Name="User_Friendship", Storage="_Befriendees", ThisKey="Username", OtherKey="Befriendee")]
		public EntitySet<Friendship> Befriendees
		{
			get
			{
				return this._Befriendees;
			}
			set
			{
				this._Befriendees.Assign(value);
			}
		}
		
		[Association(Name="User_Friendship1", Storage="_Befrienders", ThisKey="Username", OtherKey="Befriender")]
		public EntitySet<Friendship> Befrienders
		{
			get
			{
				return this._Befrienders;
			}
			set
			{
				this._Befrienders.Assign(value);
			}
		}
		
		[Association(Name="User_Point", Storage="_Points", ThisKey="Username", OtherKey="Username")]
		public EntitySet<Point> Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				this._Points.Assign(value);
			}
		}
		
		[Association(Name="User_Redemption", Storage="_Redemptions", ThisKey="Username", OtherKey="Username")]
		public EntitySet<Redemption> Redemptions
		{
			get
			{
				return this._Redemptions;
			}
			set
			{
				this._Redemptions.Assign(value);
			}
		}
		
		[Association(Name="User_Message", Storage="_Message", ThisKey="Username", OtherKey="Username", IsUnique=true, IsForeignKey=false)]
		public Message Message
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				Message previousValue = this._Message.Entity;
				if (((previousValue != value) 
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.User = null;
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Message");
				}
			}
		}
		
		[Association(Name="User_Tag", Storage="_Tags", ThisKey="Username", OtherKey="Username")]
		public EntitySet<Tag> Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				this._Tags.Assign(value);
			}
		}
		
		[Association(Name="User_Sat", Storage="_Sats", ThisKey="Username", OtherKey="Username")]
		public EntitySet<Sat> Sats
		{
			get
			{
				return this._Sats;
			}
			set
			{
				this._Sats.Assign(value);
			}
		}
		
		[Association(Name="User_HiFive", Storage="_HiFives", ThisKey="Username", OtherKey="HiFivee")]
		public EntitySet<HiFive> HiFivees
		{
			get
			{
				return this._HiFives;
			}
			set
			{
				this._HiFives.Assign(value);
			}
		}
		
		[Association(Name="User_HiFive1", Storage="_HiFives1", ThisKey="Username", OtherKey="HiFiver")]
		public EntitySet<HiFive> HiFivers
		{
			get
			{
				return this._HiFives1;
			}
			set
			{
				this._HiFives1.Assign(value);
			}
		}
		
		[Association(Name="UserType_User", Storage="_UserType", ThisKey="UserTypeID", OtherKey="UserTypeID", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UserTypeID = value.UserTypeID;
					}
					else
					{
						this._UserTypeID = default(string);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Befriendees(Friendship entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Befriendees(Friendship entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Befrienders(Friendship entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Befrienders(Friendship entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Points(Point entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Points(Point entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Redemptions(Redemption entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Redemptions(Redemption entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Sats(Sat entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Sats(Sat entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_HiFives(HiFive entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_HiFives(HiFive entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_HiFives1(HiFive entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_HiFives1(HiFive entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
	}
}
#pragma warning restore 1591
